package {{package}};

{{#imports}}import {{import}};
{{/imports}}

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.core.io.Resource;

{{^fullJavaUtil}}
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
{{/fullJavaUtil}}

{{>generatedAnnotation}}
@RestController
@RequestMapping
public interface {{classname}} {
{{#operations}}
{{#operation}}

    @RequestMapping(value = "{{basePathWithoutHost}}{{{path}}}",{{#singleContentTypes}}
        produces = "{{{vendorExtensions.x-accepts}}}",
        consumes = "{{{vendorExtensions.x-contentType}}}",{{/singleContentTypes}}{{^singleContentTypes}}{{#hasProduces}}
        produces = { {{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}} }, {{/hasProduces}}{{#hasConsumes}}
        consumes = { {{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}} },{{/hasConsumes}}{{/singleContentTypes}}
        method = RequestMethod.{{httpMethod}}
    ){{#vendorExtensions.x-security-role}}
    @org.springframework.security.access.annotation.Secured("{{vendorExtensions.x-security-role}}"){{/vendorExtensions.x-security-role}}
    default ResponseEntity<{{>returnTypes}}> {{operationId}}Api({{#allParams}}{{>queryParams}}{{>pathParams}}{{>headerParams}}{{>bodyParams}}{{>formParams}}{{#hasMore}},{{/hasMore}}{{/allParams}}) {
        {{#hasReference}}
        return toResponse({{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}}), {{{vendorExtensions.responseCode}}});
        {{/hasReference}}
        {{^hasReference}}
        {{operationId}}({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}});
        return toResponse({{{vendorExtensions.responseCode}}});
        {{/hasReference}}
    }

    {{#hasReference}}{{>returnTypes}} {{/hasReference}}{{^hasReference}}void {{/hasReference}}{{operationId}}({{#allParams}}{{#isFile}} MultipartFile {{baseName}}{{/isFile}}{{^isFile}}{{{dataType}}} {{paramName}}{{/isFile}}{{#hasMore}},{{/hasMore}}{{/allParams}});
{{/operation}}
{{/operations}}

    default <T> ResponseEntity<T> toResponse(T result, int status) {
        return new ResponseEntity<>(result, HttpStatus.resolve(status));
    }

    default ResponseEntity<Void> toResponse(int status) {
        return new ResponseEntity<Void>(HttpStatus.resolve(status));
    }
}
